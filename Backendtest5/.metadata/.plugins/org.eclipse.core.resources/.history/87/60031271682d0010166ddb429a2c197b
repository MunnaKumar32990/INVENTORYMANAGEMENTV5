package com.example.demo.service;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class AuthService {


    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;   // Use interface, not concrete class

    public AuthService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    // Find user by email
    public Optional<User> findUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    // Register new user (with hashed password)
    public String register(String email, String password, String role) {
        if (userRepository.findByEmail(email).isPresent()) {
            return "User already exists"; // You can throw an exception here if you want
        }
        // Encrypt the password before saving
        String hashedPassword = passwordEncoder.encode(password);
        User user = new User(email, hashedPassword, role);
        userRepository.save(user);
        return "User registered successfully";
    }

    // Login user (check if the password matches the stored hashed password)
    public boolean login(String email, String password) {
        Optional<User> userOpt = userRepository.findByEmail(email);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            // Check if the password matches the hashed password
            return passwordEncoder.matches(password, user.getPassword());
        }
        return false; // User not found
    }
 // AuthService.java



    public String getRoleByEmail(String email) {
        return userRepository.findByEmail(email)
                .map(User::getRole)
                .orElse(null);
    }


}
