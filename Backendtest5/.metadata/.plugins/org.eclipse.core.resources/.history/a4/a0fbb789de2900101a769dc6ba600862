package com.example.demo.controller;

import com.example.demo.dto.LoginRequest;
import com.example.demo.dto.UserDto;
import com.example.demo.model.InventoryItem;
import com.example.demo.service.AuthService;
import com.example.demo.service.InventoryService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/inventory")
public class InventoryController {

    private final AuthService authService;
    private final InventoryService inventoryService;

    public InventoryController(AuthService authService, InventoryService inventoryService) {
        this.authService = authService;
        this.inventoryService = inventoryService;
    }

    // Add inventory item
    @PostMapping("/{email}/add")
    public ResponseEntity<String> addInventoryItem(@PathVariable String email, @RequestBody InventoryItem item) {
        // Fetch the user by email
        var userOpt = authService.findUserByEmail(email);
        
        if (userOpt.isPresent()) {
            var user = userOpt.get();
            // Check if the user role matches 'owner' (or other roles based on your requirement)
            if (user.getRole().equalsIgnoreCase("Owner") || user.getRole().equalsIgnoreCase("Manager")) {
                // Add inventory item if role is valid
                inventoryService.addInventoryItem(item);
                return ResponseEntity.ok("Inventory item added successfully");
            } else {
                return ResponseEntity.status(403).body("Access Denied: Insufficient permissions");
            }
        }
        return ResponseEntity.status(404).body("User not found");
    }

    // Update inventory item
    @PutMapping("/{email}/update/{id}")
    public ResponseEntity<String> updateInventoryItem(@PathVariable String email, @PathVariable Long id, @RequestBody InventoryItem item) {
        var userOpt = authService.findUserByEmail(email);
        
        if (userOpt.isPresent()) {
            var user = userOpt.get();
            if (user.getRole().equalsIgnoreCase("Owner") || user.getRole().equalsIgnoreCase("Manager")) {
                // Update inventory item if role is valid
                inventoryService.updateInventoryItem(id, item);
                return ResponseEntity.ok("Inventory item updated successfully");
            } else {
                return ResponseEntity.status(403).body("Access Denied: Insufficient permissions");
            }
        }
        return ResponseEntity.status(404).body("User not found");
    }
}
